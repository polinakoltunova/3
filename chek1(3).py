from math import inf
import random
# Список всех стран Европы:
countries = ["австрия", "бельгия", "великобритания", "германия", "ирландия", "лихтенштейн", "люксембург", "монако",
             "нидерланды", "франция",
             "швейцария", "белоруссия", "болгария", "венгрия", "молдавия", "польша", "россия", "румыния", "словакия",
             "чехия", "украина", "дания",
             "исландия", "латвия", "литва", "норвегия", "финляндия", "эстония", "швеция", "албания", "андорра",
             "босния и герцеговина", "ватикан",
             "греция", "испания", "италия", "македония", "мальта", "португалия", "сан-марино", "сербия", "словения",
             "хорватия", "черногория"]

# Каждой стране по индексу сопоставляется список из 0 и 1, где 1 - есть путь из страны с
# соответствующим индексом в строке в страну, к которой относится конкретный список.
table = [
    [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
     0, 0, 0, 1, 0, 0],
    [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,
     0, 0, 0, 0, 0, 0],
    [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,
     0, 0, 1, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 1, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,
     0, 0, 1, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 1, 0, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
     1, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
     0, 1, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,
     0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
     0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
     0, 0, 0, 0, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
     0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
     0, 0, 1, 1, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
     0, 0, 1, 0, 1, 0]]

# Заполняем все 1 во всех строках рандомным значением от 1 до 5.
n1 = len(countries)
n = len(table)
for i in range(n):
    for j in range(n):
        if table[i][j] != 0:
            table[i][j] = random.randint(1, 5)

# Вводим страну, из которой начинается маршрут, и конечную страну.
strana_nach = input('Введите начальную страну: ').lower()
strana_kon = input('Введите конечную страну: ').lower()

# Находим их индексы в списке countries(по тем же индексам можно найти их таблицу путей в table)
ind_nach = countries.index(strana_nach)
ind_kon = countries.index(strana_kon)

# pred - список индексов стран, в которых мы уже были.
pred = [ind_nach]
# stroka - делаем заготовку строки для индекса начальной страны(ставим бесконечности, куда из начальной
# страны не попасть, а под номером начальной страны ставим 0)
stroka = []
for i in range(len(table[ind_nach])):
    if i != ind_nach:
        if table[ind_nach][i] != 0:
            stroka.append(table[ind_nach][i])
        else:
            stroka.append(inf)
    else:
        stroka.append(0)

# etap принимает индекс страны, для которой мы создаем строчку; строчку, полученную от предыдущей страны;
# таблицу всех путей и список индексов стран, в которых мы уже были(чтобы в них второй раз не заходить).
# Для новой вершины создаем пустую строку, ищем в таблице table все пути из новой вершины, если эти пути не
# ведут в индексы, в которых мы уже были, то проверяем, какой путь меньше(старый или через новую вершину)
# и добавляем в новую строчку. Для тех вершин, в которых мы уже были, оставляем предыдущие значения.
# функция фохвращает новую строчку.
def etap(ind_ver, stroka, table, pred):
    new_stroka = []
    for i in range(len(stroka)):
        if i not in pred:
            if table[ind_ver][i] != 0:
                if stroka[ind_ver] + table[ind_ver][i] < stroka[i]:
                    new_stroka.append(stroka[ind_ver] + table[ind_ver][i])
                else:
                    new_stroka.append(stroka[i])
            else:
                new_stroka.append(stroka[i])
        else:
            new_stroka.append(stroka[i])
    return new_stroka

# stroki - список из пар - [вершина, строка для неё]. Сюда мы засовываем инфу обо всех вершинах, в которых
# побывали(понадобится для вычисления маршрута).

stroki = [[stroka, ind_nach]]

# пока длина списка pred(вершин, в которых мы уже были), не будет равна (количество стран - 1), т.е. пока
# мы не пройдем все вершины, кроме индекса конечной страны(в неё мы не заходим).
while len(pred) != len(table) - 1:
    # min_ind - минимальное значение в строчке путей. По умолчанию - бесконечность.
    min_ind = inf
    for i in range(len(stroka)):
        # ищем в строчке те пути, в вершинах которых мы еще не были, с минимальным значением пути.
        if i not in pred and i != ind_kon and stroka[i] != inf:
            if min_ind == inf or stroka[i] < stroka[min_ind]:
                min_ind = i
    # Если min_ind - число(т.е. есть еще доступные пути), то мы создаем новую строку для
    # индекса min_ind с помощью функции etap, после чего запихиваем этот индекс в pred,
    # а строку в stroki. Если min_ind - бесконечность(т.е. доступных путей больше нет, но еще
    # не все вершины пройдены(какие то вершины могут быть недоступны)), то добавляем
    # в конце списка pred 0(чтобы выйти из цикла), а потом удаляем его.
    if min_ind != inf:
        pred.append(min_ind)
        stroka = etap(min_ind, stroka, table, pred)
        stroki.append([stroka, min_ind])
    else:
        pred.append(0)
# itog_znach - в последней строке ищем значение у индекса искомой страны - это и есть итоговый путь.
pred = pred[:-1]
itog_znach = stroka[ind_kon]
print('\n')
print('Путь, который необходимо преодолеть:', itog_znach, 'ед.')
print('\n')

# poisk_pred_znach по всему списку строк и индексов stroki, значению индекса и самому индексу ищет
# наиболее раннюю строку, где данному индексу соответствует данное значение(т.е. из какого индекса
# можно раньше всего туда попасть).
def poisk_pred_znach(stroki, znach, ind):
    for i in range(len(stroki)):
        if stroki[i][0][ind] == znach:
            return stroki[i]

# posled - последовательность индексов стран, из которых состоит наш путь.
posled = [ind_kon]
# ind_poiska - индекс страны, для которой мы ищем индекс, из которого мы в эту страну попали,
# первый ind_poiska - индекс конечной страны.
ind_poiska = ind_kon
# poisk_znach - значение пути в ind_poiska.
poisk_znach = itog_znach
# пока ind_poiska не является индексом начальной страны(в неё мы ни из какой другой страны не попадаем),
# мы ищем самую раннюю строку(т.к. у нас stroki заполняются последовательно, то это буквально первая
# слева строка), в которой индексу inp_poiska будет соответствовать его значение. т.к. в stroki у нас
# хранятся строки и соответствующие им индексы, то ind_poiska присваиваем индекс страны, для которой
# создавалась строка, poisk_znach присваиваем значение пути в этот индекс в найденной строке.
# добавляем найденный ind_poiska в последовательность стран, через которые надо пройти.
while ind_poiska != ind_nach:
    poisk_stroka = poisk_pred_znach(stroki, poisk_znach, ind_poiska)
    ind_poiska = poisk_stroka[1]
    poisk_znach = poisk_stroka[0][ind_poiska]
    posled.append(ind_poiska)
# принтуем страны в обратном порядке с заглавной буквы.
print('Последовательность стран: ')
for i in posled[::-1]:
    print(countries[i].capitalize())













posled = [ind_kon]
ind_poiska = ind_kon

poisk_znach = itog_znach
while ind_poiska != ind_nach:
    poisk_stroka = poisk_pred_znach(stroki, poisk_znach, ind_poiska)
    ind_poiska = poisk_stroka[1]
    poisk_znach = poisk_stroka[0][ind_poiska]
    posled.append(ind_poiska)

print('Последовательность стран: ')
for i in posled[::-1]:
    print(countries[i].capitalize())



